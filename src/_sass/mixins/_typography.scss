@use 'variables' as vars;
@use 'libraries/mq' as mq;

// Create a @font-face declaration for any included webfonts.
@mixin webfont(
  $name,
  $file,
  $path,
  $styles
) {
  @each $style in $styles {
    $variant-name: nth( $style, 1 );
    $variant-file: nth( $style, 2 );
    $weight: nth( $style, 3 );
    $style: nth( $style, 4 );

    @font-face {
      font-family: '#{ $name }';
      src: local( '#{ $name }#{ $variant-name }' ), local( '#{ $file }#{ $variant-file }' ),
        url('#{ $path }/#{ $file }#{ $variant-file }.woff2') format('woff2'),
        url('#{ $path }/#{ $file }#{ $variant-file }.woff') format('woff');
      font-weight: $weight;
      font-style: $style;
      font-display: swap;
    }
  }
}



// Fluid Type Sass Mixin.
// https://codepen.io/MadeByMike/pen/vNrvdZ
@mixin fluid-type(
  $properties,
  $min-value: vars.$t-min,
  $max-value: vars.$t-max,
  $min-screen: vars.$s-min,
  $max-screen: vars.$s-max
) {
  & {
    @each $property in $properties {
      #{ $property }: #{ $min-value };
    }

    @include mq.media( '>=sm' ) {
      @each $property in $properties {
        #{ $property }: calc-fluid-type(
          $min-screen,
          $min-value,
          $max-screen,
          $max-value
        );
      }
    }

    @include mq.media( '>=lg' ) {
      @each $property in $properties {
        #{ $property }: #{ $max-value };
      }
    }
  }
}

@function calc-fluid-type(
  $min-screen,
  $min-value,
  $max-screen,
  $max-value
) {
  $a: ( $max-value - $min-value ) / ( $max-screen - $min-screen );
  $b: $min-value - $a * $min-screen;

  $sign: '+';
  @if( $b<0 ) {
    $sign: '-';
    $b: abs($b);
  }

  @return calc( #{ $a*100 }vw #{ $sign } #{ $b } );
}
